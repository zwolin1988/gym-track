---
import Layout from "@/layouts/Layout.astro";
import { CreateWorkoutPlanWizard } from "@/components/workout-plans/CreateWorkoutPlanWizard";
import type { ExerciseListItemDTO, CategoryDTO } from "@/types";

export const prerender = false;

const user = Astro.locals.user;

if (!user) {
  return Astro.redirect("/auth/login");
}

const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/workout-plans");
}

// Pobierz ćwiczenia z kategoriami
const { data: exercises, error: exercisesError } = await Astro.locals.supabase
  .from("exercises")
  .select(
    `
    id,
    name,
    description,
    image_path,
    image_alt,
    difficulty,
    category:categories!inner(id, name, slug)
  `
  )
  .order("name");

// Pobierz kategorie dla filtrów
const { data: categories, error: categoriesError } = await Astro.locals.supabase
  .from("categories")
  .select("*")
  .order("order_index");

// Sprawdź czy plan istnieje i należy do użytkownika
const { data: plan, error: planError } = await Astro.locals.supabase
  .from("workout_plans")
  .select("id, name, user_id")
  .eq("id", id)
  .single();

if (exercisesError || categoriesError || planError || !plan) {
  // eslint-disable-next-line no-console
  console.error("Error fetching data:", exercisesError || categoriesError || planError);
  return Astro.redirect("/workout-plans?error=Nie%20znaleziono%20planu");
}

// Sprawdź czy użytkownik jest właścicielem planu
if (plan.user_id !== user.id) {
  return Astro.redirect("/workout-plans?error=Brak%20dostępu");
}

// Transformuj dane do właściwego typu
const exercisesData: ExerciseListItemDTO[] =
  exercises?.map((ex) => ({
    id: ex.id,
    name: ex.name,
    description: ex.description,
    image_path: ex.image_path,
    image_alt: ex.image_alt,
    difficulty: ex.difficulty,
    created_at: ex.created_at,
    category: {
      id: ex.category.id,
      name: ex.category.name,
      slug: ex.category.slug,
    },
  })) || [];

const categoriesData: CategoryDTO[] = (categories || []) as CategoryDTO[];
---

<Layout title={`Edycja planu: ${plan.name} - Gym Track`}>
  <div class="container mx-auto px-4 py-8 sm:px-6 lg:px-8">
    <!-- Back Button -->
    <a
      href={`/workout-plans/${id}`}
      class="mb-6 inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground"
    >
      <span class="material-symbols-outlined text-base">arrow_back</span>
      Powrót do planu
    </a>

    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold tracking-tight sm:text-4xl">Edycja planu treningowego</h1>
      <p class="mt-2 text-muted-foreground">Zaktualizuj szczegóły swojego planu w 3 krokach</p>
    </div>

    <!-- Wizard -->
    <div class="mx-auto max-w-5xl">
      <CreateWorkoutPlanWizard
        exercises={exercisesData}
        categories={categoriesData}
        editMode={true}
        existingPlanId={id}
        client:load
      />
    </div>
  </div>
</Layout>
