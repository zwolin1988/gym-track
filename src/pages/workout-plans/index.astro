---
import Layout from "@/layouts/Layout.astro";
import { WorkoutPlansFilters } from "@/components/workout-plans/WorkoutPlansFilters";
import WorkoutPlanCard from "@/components/workout-plans/WorkoutPlanCard";
import { getWorkoutPlans, checkActiveWorkout } from "@/lib/services/workout-plans-list.service";

export const prerender = false;

// 1. Authentication check
const user = Astro.locals.user;

if (!user) {
  return Astro.redirect("/auth/login");
}

// 2. Parse query params
const searchParams = Astro.url.searchParams;
const search = searchParams.get("search") || "";
const page = Math.max(1, parseInt(searchParams.get("page") || "1", 10));

// 3. Get workout plans
const result = await getWorkoutPlans({ supabase: Astro.locals.supabase, search, page });
const plans = result.plans;
const totalPages = result.totalPages;
const error = result.error;

// 4. Handle errors
if (error) {
  return Astro.redirect("/error?message=" + encodeURIComponent(error));
}

// 5. Check for active workout
const hasActiveWorkout = await checkActiveWorkout(Astro.locals.supabase);
---

<Layout title="Workout Plans - Gym Track">
  <div class="container mx-auto px-4 py-8 sm:px-6 lg:px-8">
    <!-- Header with Action Buttons -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold tracking-tight sm:text-4xl">Plany treningowe</h1>
          <p class="mt-2 text-muted-foreground">Zarządzaj swoimi planami treningowymi</p>
        </div>
        <div class="flex gap-3">
          {
            hasActiveWorkout && (
              <a
                href="/workouts/active"
                class="inline-flex items-center gap-2 rounded-lg border border-green-600 bg-green-50 px-6 py-3 font-medium text-green-700 hover:bg-green-100"
              >
                <span class="material-symbols-outlined text-base">play_circle</span>
                Kontynuuj trening
              </a>
            )
          }
          <a
            href="/workout-plans/new"
            data-testid="new-workout-plan-button"
            class="inline-flex items-center gap-2 rounded-lg bg-primary px-6 py-3 font-medium text-primary-foreground hover:bg-primary/90"
          >
            <span class="material-symbols-outlined text-base">add</span>
            Nowy plan
          </a>
        </div>
      </div>
    </div>

    <!-- Filters -->
    <WorkoutPlansFilters initialSearch={search} client:load />

    <!-- Plans List -->
    {
      plans.length === 0 ? (
        <div class="rounded-lg border bg-card p-12 text-center shadow-sm">
          <span class="material-symbols-outlined mb-4 text-6xl text-muted-foreground">list_alt</span>
          <h3 class="mb-2 text-lg font-semibold">Brak planów treningowych</h3>
          <p class="mb-6 text-sm text-muted-foreground">
            {search ? "Nie znaleziono planów pasujących do wyszukiwania" : "Stwórz swój pierwszy plan treningowy"}
          </p>
          {!search && (
            <a
              href="/workout-plans/new"
              class="inline-flex items-center gap-2 rounded-lg bg-primary px-6 py-3 text-sm font-medium text-primary-foreground hover:bg-primary/90"
            >
              <span class="material-symbols-outlined text-base">add</span>
              Nowy plan treningowy
            </a>
          )}
        </div>
      ) : (
        <>
          <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {plans.map((plan) => <WorkoutPlanCard plan={plan} client:load />)}
          </div>

          <!-- Pagination -->
          {
            totalPages > 1 && (
              <div class="mt-8 flex items-center justify-center gap-2">
                <button
                  onclick={`
                    const params = new URLSearchParams(window.location.search);
                    params.set('page', '${page - 1}');
                    window.location.href = '/workout-plans?' + params.toString();
                  `}
                  disabled={page === 1}
                  class="rounded-lg border bg-background px-4 py-2 text-sm font-medium hover:bg-muted disabled:cursor-not-allowed disabled:opacity-50"
                >
                  Poprzednia
                </button>
                <span class="text-sm text-muted-foreground">
                  Strona {page} z {totalPages}
                </span>
                <button
                  onclick={`
                    const params = new URLSearchParams(window.location.search);
                    params.set('page', '${page + 1}');
                    window.location.href = '/workout-plans?' + params.toString();
                  `}
                  disabled={page === totalPages}
                  class="rounded-lg border bg-background px-4 py-2 text-sm font-medium hover:bg-muted disabled:cursor-not-allowed disabled:opacity-50"
                >
                  Następna
                </button>
              </div>
            )
          }
        </>
      )
    }
  </div>
</Layout>
