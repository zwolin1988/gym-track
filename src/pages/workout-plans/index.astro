---
import Layout from "@/layouts/Layout.astro";
import { WorkoutPlansFilters } from "@/components/workout-plans/WorkoutPlansFilters";
import WorkoutPlanCard from "@/components/workout-plans/WorkoutPlanCard";
import type { WorkoutPlanListItemDTO } from "@/types";

export const prerender = false;

// 1. Authentication check
const user = Astro.locals.user;

if (!user) {
  return Astro.redirect("/auth/login");
}

// 2. Parse query params
const searchParams = Astro.url.searchParams;
const search = searchParams.get("search") || "";
const page = Math.max(1, parseInt(searchParams.get("page") || "1", 10));
const limit = 20;

let query = Astro.locals.supabase
  .from("workout_plans")
  .select(
    `
    id,
    name,
    description,
    created_at,
    updated_at,
    last_used_at,
    plan_exercises(
      id,
      plan_exercise_sets(
        id
      )
    )
  `,
    { count: "exact" }
  )
  .is("deleted_at", null)
  .order("updated_at", { ascending: false });

// Apply filters
if (search) {
  query = query.ilike("name", `%${search}%`);
}

// Apply pagination
const from = (page - 1) * limit;
const to = from + limit - 1;
query = query.range(from, to);

// 4. Execute query
const { data: plansRaw, error, count } = await query;

// 5. Handle errors
if (error) {
  return Astro.redirect("/error?message=" + encodeURIComponent("Nie udało się załadować planów treningowych"));
}

// 6. Transform data
interface PlanRawData {
  id: string;
  name: string;
  description: string | null;
  created_at: string;
  updated_at: string;
  last_used_at: string | null;
  plan_exercises: {
    id: string;
    plan_exercise_sets: {
      id: string;
    }[];
  }[];
}

const plans: WorkoutPlanListItemDTO[] = (plansRaw || []).map((p: PlanRawData) => {
  const exercise_count = p.plan_exercises?.length || 0;
  const total_sets = p.plan_exercises?.reduce((sum, ex) => sum + (ex.plan_exercise_sets?.length || 0), 0) || 0;

  return {
    id: p.id,
    name: p.name,
    description: p.description,
    exercise_count,
    total_sets,
    last_used_at: p.last_used_at,
    created_at: p.created_at,
    updated_at: p.updated_at,
  };
});

const totalPlans = count || 0;
const totalPages = Math.ceil(totalPlans / limit);

// 7. Check for active workout
const { data: activeWorkout } = await Astro.locals.supabase
  .from("workouts")
  .select("id")
  .eq("status", "active")
  .maybeSingle();

const hasActiveWorkout = !!activeWorkout;
---

<Layout title="Workout Plans - Gym Track">
  <div class="container mx-auto px-4 py-8 sm:px-6 lg:px-8">
    <!-- Header with Action Buttons -->
    <div class="mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold tracking-tight sm:text-4xl">Plany treningowe</h1>
          <p class="mt-2 text-muted-foreground">Zarządzaj swoimi planami treningowymi</p>
        </div>
        <div class="flex gap-3">
          {
            hasActiveWorkout && (
              <a
                href="/workouts/active"
                class="inline-flex items-center gap-2 rounded-lg border border-green-600 bg-green-50 px-6 py-3 font-medium text-green-700 hover:bg-green-100"
              >
                <span class="material-symbols-outlined text-base">play_circle</span>
                Kontynuuj trening
              </a>
            )
          }
          <a
            href="/workout-plans/new"
            data-testid="new-workout-plan-button"
            class="inline-flex items-center gap-2 rounded-lg bg-primary px-6 py-3 font-medium text-primary-foreground hover:bg-primary/90"
          >
            <span class="material-symbols-outlined text-base">add</span>
            Nowy plan
          </a>
        </div>
      </div>
    </div>

    <!-- Filters -->
    <WorkoutPlansFilters initialSearch={search} client:load />

    <!-- Plans List -->
    {
      plans.length === 0 ? (
        <div class="rounded-lg border bg-card p-12 text-center shadow-sm">
          <span class="material-symbols-outlined mb-4 text-6xl text-muted-foreground">list_alt</span>
          <h3 class="mb-2 text-lg font-semibold">Brak planów treningowych</h3>
          <p class="mb-6 text-sm text-muted-foreground">
            {search ? "Nie znaleziono planów pasujących do wyszukiwania" : "Stwórz swój pierwszy plan treningowy"}
          </p>
          {!search && (
            <a
              href="/workout-plans/new"
              class="inline-flex items-center gap-2 rounded-lg bg-primary px-6 py-3 text-sm font-medium text-primary-foreground hover:bg-primary/90"
            >
              <span class="material-symbols-outlined text-base">add</span>
              Nowy plan treningowy
            </a>
          )}
        </div>
      ) : (
        <>
          <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {plans.map((plan) => <WorkoutPlanCard plan={plan} client:load />)}
          </div>

          <!-- Pagination -->
          {
            totalPages > 1 && (
              <div class="mt-8 flex items-center justify-center gap-2">
                <button
                  onclick={`
                    const params = new URLSearchParams(window.location.search);
                    params.set('page', '${page - 1}');
                    window.location.href = '/workout-plans?' + params.toString();
                  `}
                  disabled={page === 1}
                  class="rounded-lg border bg-background px-4 py-2 text-sm font-medium hover:bg-muted disabled:cursor-not-allowed disabled:opacity-50"
                >
                  Poprzednia
                </button>
                <span class="text-sm text-muted-foreground">
                  Strona {page} z {totalPages}
                </span>
                <button
                  onclick={`
                    const params = new URLSearchParams(window.location.search);
                    params.set('page', '${page + 1}');
                    window.location.href = '/workout-plans?' + params.toString();
                  `}
                  disabled={page === totalPages}
                  class="rounded-lg border bg-background px-4 py-2 text-sm font-medium hover:bg-muted disabled:cursor-not-allowed disabled:opacity-50"
                >
                  Następna
                </button>
              </div>
            )
          }
        </>
      )
    }
  </div>
</Layout>
