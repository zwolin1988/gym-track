---
import Layout from "@/layouts/Layout.astro";
import { ExercisesGrid } from "@/components/exercises/ExercisesGrid";
import { ExercisesFilters } from "@/components/exercises/ExercisesFilters";
import type { ExercisesPaginatedResponseDTO, CategoryDTO } from "@/types";

export const prerender = false;

// Sprawdź autoryzację
const user = Astro.locals.user;

if (!user) {
  return Astro.redirect("/auth/login");
}

// Parsing URL parameters
const searchParams = Astro.url.searchParams;
const categoryId = searchParams.get("category_id") || "";
const difficulty = searchParams.get("difficulty") || "";
const search = searchParams.get("search") || "";
const page = Math.max(1, parseInt(searchParams.get("page") || "1", 10));
const limit = 20;

// Budowanie URL do API exercises
const apiParams = new URLSearchParams();
if (categoryId) apiParams.set("category_id", categoryId);
if (difficulty) apiParams.set("difficulty", difficulty);
if (search) apiParams.set("search", search);
apiParams.set("page", page.toString());
apiParams.set("limit", limit.toString());

// Fetch exercises
const exercisesResponse = await fetch(`${Astro.url.origin}/api/exercises?${apiParams.toString()}`, {
  headers: {
    Cookie: Astro.request.headers.get("Cookie") || "",
  },
});

if (!exercisesResponse.ok) {
  if (exercisesResponse.status === 401) {
    return Astro.redirect("/auth/login");
  }
  // eslint-disable-next-line no-console
  console.error("Error fetching exercises:", exercisesResponse.statusText);
  return Astro.redirect("/error?message=" + encodeURIComponent("Nie udało się załadować ćwiczeń"));
}

const exercisesData: ExercisesPaginatedResponseDTO = await exercisesResponse.json();

// Fetch categories dla filtra
const categoriesResponse = await fetch(`${Astro.url.origin}/api/categories`, {
  headers: {
    Cookie: Astro.request.headers.get("Cookie") || "",
  },
});

if (!categoriesResponse.ok) {
  // eslint-disable-next-line no-console
  console.error("Error fetching categories:", categoriesResponse.statusText);
  return Astro.redirect("/error?message=" + encodeURIComponent("Nie udało się załadować kategorii"));
}

const categoriesResult = await categoriesResponse.json();
const categories: CategoryDTO[] = categoriesResult.data || [];

// Prepare data for components
const exercises = exercisesData.data || [];
const pagination = exercisesData.pagination;
---

<Layout title="Baza ćwiczeń - Gym Track">
  <main class="container mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="mb-3 text-3xl font-bold tracking-tight sm:text-4xl">Baza ćwiczeń</h1>
      <p class="text-lg text-muted-foreground">
        Znaleziono <span class="font-semibold">{pagination.total}</span>
        {pagination.total === 1 ? "ćwiczenie" : "ćwiczeń"}
      </p>
    </div>

    <!-- Filters -->
    <ExercisesFilters
      categories={categories}
      initialSearch={search}
      initialCategoryId={categoryId}
      initialDifficulty={difficulty}
      client:load
    />

    <!-- Grid -->
    <ExercisesGrid exercises={exercises} client:load />

    <!-- Pagination -->
    {
      pagination.total_pages > 1 && (
        <div class="mt-8 flex flex-col items-center justify-between gap-4 md:flex-row">
          <p class="text-sm text-muted-foreground">
            Wyświetlane {(page - 1) * limit + 1}-{Math.min(page * limit, pagination.total)} z {pagination.total} wyników
          </p>

          <div class="flex items-center gap-2">
            <button
              onclick={`
                const params = new URLSearchParams(window.location.search);
                params.set('page', '${page - 1}');
                window.location.href = '/exercises?' + params.toString();
              `}
              disabled={page === 1}
              class="rounded-lg border bg-background px-4 py-2 text-sm hover:bg-muted disabled:opacity-50"
            >
              Poprzednia
            </button>

            <span class="text-sm text-muted-foreground">
              Strona {page} z {pagination.total_pages}
            </span>

            <button
              onclick={`
                const params = new URLSearchParams(window.location.search);
                params.set('page', '${page + 1}');
                window.location.href = '/exercises?' + params.toString();
              `}
              disabled={page === pagination.total_pages}
              class="rounded-lg border bg-background px-4 py-2 text-sm hover:bg-muted disabled:opacity-50"
            >
              Następna
            </button>
          </div>
        </div>
      )
    }
  </main>
</Layout>
