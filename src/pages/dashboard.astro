---
import Layout from "@/layouts/Layout.astro";
import { LastWorkoutSummary } from "@/components/dashboard/LastWorkoutSummary";
import { VolumeChart } from "@/components/dashboard/VolumeChart";
import { QuickActions } from "@/components/dashboard/QuickActions";
import type { WorkoutListItemDTO, WorkoutStatsDataPointDTO } from "@/types";

export const prerender = false;

// Sprawdź autoryzację
if (!Astro.locals.user) {
  return Astro.redirect("/auth/login");
}

// Pobierz dane równolegle dla wydajności
const [activeWorkoutResponse, lastWorkoutResponse, statsResponse] = await Promise.all([
  // 1. Aktywny trening
  fetch(`${Astro.url.origin}/api/workouts/active`, {
    headers: {
      Cookie: Astro.request.headers.get("Cookie") || "",
    },
  }),

  // 2. Ostatni zakończony trening
  fetch(`${Astro.url.origin}/api/workouts?status=completed&limit=1&sort=started_at&order=desc`, {
    headers: {
      Cookie: Astro.request.headers.get("Cookie") || "",
    },
  }),

  // 3. Statystyki do wykresu (ostatnie 4 tygodnie)
  fetch(`${Astro.url.origin}/api/workouts/stats?period=4w`, {
    headers: {
      Cookie: Astro.request.headers.get("Cookie") || "",
    },
  }),
]);

// Obsługa błędów autoryzacji
if (activeWorkoutResponse.status === 401 || lastWorkoutResponse.status === 401 || statsResponse.status === 401) {
  return Astro.redirect("/auth/login");
}

// Parse responses z obsługą błędów
let lastWorkout: WorkoutListItemDTO | null = null;
if (lastWorkoutResponse.ok && lastWorkoutResponse.status !== 500) {
  try {
    const data = await lastWorkoutResponse.json();
    lastWorkout = data.data?.[0] || null;
  } catch {
    // Ignore parsing errors
  }
}

let volumeChartData: WorkoutStatsDataPointDTO[] = [];
if (statsResponse.ok) {
  try {
    const data = await statsResponse.json();
    volumeChartData = data.data?.workouts || [];
  } catch {
    // Ignore parsing errors
  }
}
---

<Layout title="Dashboard - Gym Track">
  <main class="container mx-auto px-4 py-8 max-w-7xl">
    <!-- Szybkie akcje -->
    <QuickActions client:load />

    <!-- Grid Layout: Ostatni trening + Wykres -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
      <!-- Ostatni trening -->
      <div>
        <LastWorkoutSummary lastWorkout={lastWorkout} client:load />
      </div>

      <!-- Wykres objętości -->
      <div>
        <VolumeChart data={volumeChartData} period="4w" client:load />
      </div>
    </div>
  </main>
</Layout>
